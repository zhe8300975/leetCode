class Solution {

    //nums = [4,5,6,7,0,1,2], target = 0
    //二分
    //1.middle 当前落在左升部分  （当前middle 比最右侧大） middle < target (在右侧) middle > target (target>nums[0]在左面 否者可能在右面)
    //2.middle 当前落在右升部分  （当前middle 比最左侧小） middle < target (target>=nums[0]可能在左面 否者可能在右面) middle > target (在左侧)


    //    6
    //  5
    //4
    //            3
    //          2
    //        1
    fun search(nums: IntArray, target: Int): Int {
        var left=0
        var right=nums.size-1
        while (left<=right){
            var middle=(left+right)/2
            if(nums[middle]==target){
                return middle
            }else if(nums[middle]>=nums[left]){
                if(target>=nums[left]&&target<nums[middle]){
                    right=middle-1
                }else{
                    left=middle+1
                }
            }else {
                if(target>nums[middle]&&target<=nums[right]){
                    left=middle+1
                }else{
                    right=middle-1
                }
            }
        }
        return -1
    }
}

//runtime:192 ms
//memory:35.7 MB
