class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans= new ArrayList();
        List<Integer> path=new ArrayList();
        combinationSum(candidates,0,target,path,ans);
        return ans;
    }

    public void combinationSum(int []candidates ,int index,int target,List<Integer> path,List<List<Integer>> ans){
        if(target==0){
            ans.add(new ArrayList(path));
            return ;
        }else if(target>0&&index<candidates.length){
            combinationSum(candidates,index+1,target,path,ans);
            path.add(candidates[index]);
            combinationSum(candidates,index,target-candidates[index],path,ans);
            path.remove(path.size()-1);
        }
    }
}
//runtime:4 ms
//memory:38.5 MB
