class Solution {
    fun findUnsortedSubarray(nums: IntArray): Int {
        var left=getLeft(nums).apply { println(this) }
        var right=getRight(nums).apply { println(this) }
        return if(left==right) 0 else right-left+1
    }

        fun getLeft(nums: IntArray):Int{
            var min=Int.MAX_VALUE
            for(index in 1 until nums.size){
                if(nums[index]<nums[index-1]){
                    min=Math.min(min,nums[index])
                }
            }
            var left=-1
            run loop@{
                nums.forEachIndexed { index, value ->
                    if (value > min) {
                        left = index
                        return@loop
                    }
                }
            }
            return left

        }


        fun getRight(nums: IntArray):Int{
            var max=Int.MIN_VALUE
            for(i in nums.size-2 downTo 0){
                if(nums[i]>nums[i+1]){
                    max=Math.max(max,nums[i])
                }
            }
            var rightIndex=-1
            for( i in nums.size-1 downTo 0){
                if(nums[i]<max){
                    rightIndex=i
                    break
                }
            }
            return rightIndex
        }
}

//runtime:212 ms
//memory:39 MB
