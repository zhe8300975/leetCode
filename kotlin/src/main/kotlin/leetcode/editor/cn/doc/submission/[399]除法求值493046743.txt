    class Solution {
        fun calcEquation(equations: List<List<String>>, values: DoubleArray, queries: List<List<String>>): DoubleArray {
            val queationSize=equations.size
            val unionFind=UnionFind(2*queationSize)
            val map=HashMap<String,Int>(2*queationSize)
            var id=0
            equations.forEachIndexed{index, item->
                var var1=item[0]
                var var2=item[1]

                if(!map.containsKey(var1)){
                    map.put(var1,id)
                    id++
                }
                if(!map.containsKey(var2)){
                    map.put(var2,id)
                    id++
                }
                unionFind.union(map.get(var1)!!,map.get(var2)!!,values[index])
            }
            val queriesSize=queries.size
            var ans=DoubleArray(queriesSize)
            queries.forEachIndexed {index, item->
                val id1=map[item[0]]
                val id2=map[item[1]]
                if(id1==null||id2==null){
                    ans[index]=-1.0
                }else{
                    ans[index]=unionFind.isConnected(id1,id2)
                }
            }
            return ans

        }


        class UnionFind(n: Int) {
            var parent = IntArray(n) { it }
            var weight = DoubleArray(n) { 1.0 }


            fun union(x: Int, y: Int, value: Double) {
                val rootX=find(x)
                val rootY=find(y)
                if(rootX==rootY){
                    return
                }

                parent[rootX]=rootY
                weight[rootX]=weight[y]*value/weight[x]
            }

            fun find(x:Int):Int{
                if(x!=parent[x]){
                    var origin=parent[x]
                    parent[x]=find(parent[x])
                    weight[x]*=weight[origin]
                }
                return parent[x]
            }
            fun isConnected(x:Int,y:Int):Double{
                var rootX=find(x)
                var rootY=find(y)
                if(rootX==rootY){
                    return weight[x]/weight[y]
                }else{
                    return -1.0
                }
            }

        }
    }

//runtime:168 ms
//memory:34.1 MB
