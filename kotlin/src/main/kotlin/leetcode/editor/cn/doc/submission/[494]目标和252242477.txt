class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int dp[][]=new int[nums.length][2001];
        dp[0][1000-nums[0]]+=1;
        dp[0][1000+nums[0]]+=1;
        for(int i=1;i<nums.length;i++){
            for(int index=0;index<2001;index++){
                if(dp[i-1][index]>0){
                    dp[i][index+nums[i]]+=dp[i-1][index];
                    dp[i][index-nums[i]]+=dp[i-1][index];
                }
            }
        }
        return dp[nums.length-1][target+1000];
    }
//    public int findTargetSumWays(int[] nums, int target) {
//        findTargetSumWays(nums,target,0,0);
//        return ans;
//    }
//    public void findTargetSumWays(int[] nums, int target,int index,int sum){
//        if(index==nums.length){
//            if(sum==target){
//                ans++;
//            }
//        }else{
//            findTargetSumWays(nums,target,index+1,sum+nums[index]);
//            findTargetSumWays(nums,target,index+1,sum-nums[index]);
//        }
//    }
}

//runtime:8 ms
//memory:38.3 MB
