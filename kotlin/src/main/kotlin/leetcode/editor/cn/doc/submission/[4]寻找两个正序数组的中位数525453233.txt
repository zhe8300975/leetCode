    class Solution {
        fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {
            if (nums2.size < nums1.size) {
                return findMedianSortedArrays(nums2, nums1)
            }
            var left = 0
            var right = nums1.size
            while (left <= right) {
                var i = (left + right) / 2
                var j = (nums1.size + nums2.size + 1) / 2 - i

                if (j != 0 && i != nums1.size && nums2[j - 1] > nums1[i]) {
                    left = i + 1
                } else if (i != 0 && j != nums2.size && nums2[j] < nums1[i - 1]) {
                    right = right - 1
                } else {
                    var maxLeft = 0
                    if (i == 0) {
                        maxLeft = nums2[j - 1]
                    } else if (j == 0) {
                        maxLeft = nums1[i - 1]
                    } else {
                        maxLeft = Math.max(nums1[i - 1], nums2[j - 1])
                    }

                    if ((nums1.size + nums2.size) % 2 == 1) return maxLeft.toDouble()


                    var minRight = 0
                    if (i == nums1.size) {
                        minRight = nums2[j]
                    } else if (j == nums2.size) {
                        minRight = nums1[i]
                    } else {
                        minRight = Math.min(nums1[i], nums2[j])
                    }

                    return (maxLeft + minRight).toDouble() / 2

                }
            }
            return 0.0
        }
    }

//runtime:265 ms
//memory:46.5 MB
