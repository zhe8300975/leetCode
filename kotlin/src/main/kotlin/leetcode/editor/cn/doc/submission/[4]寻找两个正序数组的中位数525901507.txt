    class Solution {
        fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {
            if (nums2.size < nums1.size) {
                return findMedianSortedArrays(nums2, nums1)
            }

            var left = 0
            var right = nums1.size
            while (left <= right) {
                var i = (left + right) / 2
                var j = (nums1.size + nums2.size + 1) / 2 - i

                if (i != 0 && j != nums2.size && nums1[i - 1] > nums2[j]) {
                    right = i - 1
                } else if (i != nums1.size && j != 0 && nums2[j - 1] > nums1[i]) {
                    left = i + 1
                } else {
                    var maxLeft = if (i == 0) {
                        nums2[j - 1].toDouble()
                    } else if (j == 0) {
                        nums1[i - 1].toDouble()
                    } else {
                        Math.max(nums1[i - 1].toDouble(), nums2[j - 1].toDouble())
                    }
                    if ((nums1.size+ nums2.size) % 2 == 1) {
                        return maxLeft
                    }

                    var minRight = if (i == nums1.size) {
                        nums2[j].toDouble()
                    } else if (j == nums2.size) {
                        nums1[i].toDouble()
                    } else {
                        Math.min(nums1[i].toDouble(), nums2[j].toDouble())
                    }
                    return (maxLeft + minRight) / 2

                }
            }
            return 0.0
        }


    }

//runtime:256 ms
//memory:47.2 MB
